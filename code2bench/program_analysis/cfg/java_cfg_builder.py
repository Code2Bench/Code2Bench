import javalang
from typing import List, Dict, Any, Optional

def is_constant_expression(node) -> bool:
    """
    检查Java AST节点是否代表常量表达式
    """
    if node is None:
        return True
    
    # 基本常量
    if isinstance(node, javalang.tree.Literal):
        return True
    
    # 数组初始化 - 检查所有元素是否为常量
    if isinstance(node, javalang.tree.ArrayInitializer):
        return all(is_constant_expression(init) for init in node.initializers)
    
    # 类型转换 - 检查被转换的表达式是否为常量
    if isinstance(node, javalang.tree.Cast):
        return is_constant_expression(node.expression)
    
    # 成员引用 - 可能是字段访问
    if isinstance(node, javalang.tree.MemberReference):
        # 简化处理，认为字段引用不是常量
        return False
    
    # 方法调用 - 不是常量
    if isinstance(node, javalang.tree.MethodInvocation):
        return False
    
    # 变量引用 - 不是常量  
    if isinstance(node, javalang.tree.This):
        return False
    
    # 三元条件表达式
    if isinstance(node, javalang.tree.TernaryExpression):
        return (is_constant_expression(node.condition) and
                is_constant_expression(node.if_true) and
                is_constant_expression(node.if_false))
    
    # 二元表达式 - 检查两个操作数是否都为常量
    if isinstance(node, javalang.tree.BinaryOperation):
        return (is_constant_expression(node.operandl) and 
               is_constant_expression(node.operandr))
    
    # 创建对象表达式 - 不是常量
    if isinstance(node, javalang.tree.ClassCreator):
        return False
    
    # 数组创建 - 不是常量
    if isinstance(node, javalang.tree.ArrayCreator):
        return False
    
    # 赋值表达式 - 不是常量
    if isinstance(node, javalang.tree.Assignment):
        return False
    
    # 其他未知类型，保守地认为不是常量
    return False

def extract_return_statements(node, returns=None) -> List:
    """
    递归提取节点中所有的return语句
    """
    if returns is None:
        returns = []
    
    # 如果当前节点是return语句，添加到列表
    if isinstance(node, javalang.tree.ReturnStatement):
        returns.append(node)
        return returns
    
    # 递归遍历所有子节点
    if hasattr(node, 'children'):
        for child in node.children:
            if child is None:
                continue
            elif isinstance(child, list):
                for item in child:
                    if item is not None:
                        extract_return_statements(item, returns)
            else:
                extract_return_statements(child, returns)
    
    return returns

def wrap_in_class(java_code: str) -> str:
    """
    如果Java代码中没有类声明，将其包裹在一个默认类中。

    Args:
        java_code (str): 输入的Java代码字符串。

    Returns:
        str: 包裹后的Java代码字符串。
    """
    # if "class " not in java_code:
    return f"public class AutoGeneratedClass {{\n{java_code.strip()}\n}}"
    # return java_code

def check_java_non_null_non_constant_return(java_code: str) -> bool:
    """
    检查Java方法是否有非null且非常量的返回值
    
    Args:
        java_code: Java源代码字符串，为一个function
    
    Returns:
        字典，键为方法名，值为是否有非null非常量返回值的布尔值
    """
    try:
        # 包裹代码
        java_code = wrap_in_class(java_code)
        # 解析Java代码
        tree = javalang.parse.parse(java_code)
    except Exception as e:
        print(f"解析Java代码失败: {e}")
        import traceback
        traceback.print_exc()
        return {}
    
    results = {}
    
    # 遍历所有类
    for path, node in tree.filter(javalang.tree.ClassDeclaration):
        class_name = node.name
        
        # 遍历类中的所有方法
        for method in node.methods:
            method_name = f"{class_name}.{method.name}"
            
            # 检查方法返回类型是否为void
            if method.return_type is None:
                # results[method_name] = False
                # continue
                return False
            
            if (hasattr(method.return_type, 'name') and 
                method.return_type.name == 'void'):
                # results[method_name] = False
                # continue
                return False
            
            # 如果方法体为空，跳过
            if method.body is None:
                # results[method_name] = False
                # continue
                return False
            
            # 提取所有return语句
            return_statements = []
            for stmt in method.body:
                extract_return_statements(stmt, return_statements)
            
            has_non_null_non_constant = False
            
            for return_stmt in return_statements:
                # 检查return语句是否有表达式
                if return_stmt.expression is not None:
                    # 检查是否为null字面量
                    if (isinstance(return_stmt.expression, javalang.tree.Literal) and 
                        return_stmt.expression.value == 'null'):
                        continue
                    
                    # 检查是否为常量表达式
                    if not is_constant_expression(return_stmt.expression):
                        has_non_null_non_constant = True
                        break
            
            # results[method_name] = has_non_null_non_constant
            return has_non_null_non_constant
    
    # return results

def analyze_java_file(file_path: str) -> Dict[str, bool]:
    """
    分析Java文件中的方法返回值
    
    Args:
        file_path: Java文件路径
    
    Returns:
        字典，键为方法名，值为是否有非null非常量返回值的布尔值
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            java_code = f.read()
        return check_java_non_null_non_constant_return(java_code)
    except Exception as e:
        print(f"读取文件失败: {e}")
        return {}

# 测试用例
if __name__ == "__main__":
    # 先打印javalang的tree结构，用于调试
    print("可用的javalang.tree类型:")
    for attr in dir(javalang.tree):
        if not attr.startswith('_'):
            print(f"  {attr}")
    print()
    
    # 测试Java代码
    test_java_code = """
    public class TestClass {
        
        // 有效方法 - 返回非常量
        public String getDynamicValue(int x) {
            if (x > 0) {
                return getString(); // 非常量
            }
            return "default";
        }
        
        // 无效方法 - 只返回常量
        public int getConstant() {
            return 42; // 常量
        }
        
        // 无效方法 - 返回null
        public String getNullValue() {
            return null;
        }
        
        // 无效方法 - void返回类型
        public void doSomething() {
            System.out.println("doing something");
        }
        
        // 有效方法 - 返回变量
        public String getName() {
            String name = computeName();
            return name; // 非常量
        }
        
        // 混合情况 - 既有常量又有非常量返回
        public Object getMixed(boolean flag) {
            if (flag) {
                return new Object(); // 非常量
            }
            return "constant"; // 常量
        }
        
        private String getString() { return "test"; }
        private String computeName() { return "test"; }
    }
    """

    test_java_code2 = """
        public class TestClass {
            // 混合情况 - 既有常量又有非常量返回
            public Object getMixed(boolean flag) {
                if (flag) {
                    return new Object(); // 非常量
                }
                return "constant"; // 常量
            }
        }
    """ 
    
    results = check_java_non_null_non_constant_return(test_java_code2)
    
    print("Java方法返回值分析结果:")
    for method_name, has_non_constant in results.items():
        status = "✅ 有非null非常量返回" if has_non_constant else "❌ 只有null/常量返回"
        print(f"{method_name}: {status}")