package p15;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import net.jqwik.api.*;
import net.jqwik.api.lifecycle.AfterContainer;
import p15.GroundTruth;

public class TestCaseGenerator {

    static class TestCase {
        Map<String, Object> Inputs;
        Object Expected;
        TestCase(Map<String, Object> inputs, Object expected) {
            this.Inputs = inputs;
            this.Expected = expected;
        }
    }

    static List<TestCase> generatedCases = new ArrayList<>();
    static AtomicInteger caseCount = new AtomicInteger(0);
    static final int MAX_CASES = 500;

    @Property(tries = 10000)
    void generateTestCases(@ForAll("jsonString") Object value) {
        if (caseCount.get() >= MAX_CASES) {
            return;
        }

        String result;
        try {
            result = GroundTruth.escapeJsonString(value);
        } catch (Exception e) {
            return;
        }

        Map<String, Object> inputs = new LinkedHashMap<>();
        inputs.put("value", value);
        generatedCases.add(new TestCase(inputs, result));
        caseCount.incrementAndGet();
    }

    @Example
    void exampleNull() {
        generateTestCases(null);
    }

    @Example
    void exampleEmptyString() {
        generateTestCases("");
    }

    @Example
    void exampleBackslash() {
        generateTestCases("\\");
    }

    @Example
    void exampleQuote() {
        generateTestCases("\"");
    }

    @Example
    void exampleBackspace() {
        generateTestCases("\b");
    }

    @Example
    void exampleFormFeed() {
        generateTestCases("\f");
    }

    @Example
    void exampleNewline() {
        generateTestCases("\n");
    }

    @Example
    void exampleCarriageReturn() {
        generateTestCases("\r");
    }

    @Example
    void exampleTab() {
        generateTestCases("\t");
    }

    @Example
    void exampleHelloWorld() {
        generateTestCases("Hello, World!");
    }

    @Example
    void exampleJson() {
        generateTestCases("{\"key\": \"value\"}");
    }

    @Provide
    Arbitrary<Object> jsonString() {
        return Arbitraries.oneOf(
            Arbitraries.strings().withChars("\\\"\b\f\n\r\t".toCharArray()),
            Arbitraries.strings().alpha().ofMinLength(0).ofMaxLength(20),
            Arbitraries.strings().numeric().ofMinLength(0).ofMaxLength(20),
            Arbitraries.strings().withChars("{}[]:,".toCharArray()),
            Arbitraries.just(null)
        );
    }

    @AfterContainer
    static void saveTestCases() throws IOException {
        if (generatedCases.isEmpty()) {
            return;
        }
        String dirPath = "src/test/java/test_cases";
        File dir = new File(dirPath);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String filePath = dirPath + "/test_cases.json";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (Writer writer = new FileWriter(filePath)) {
            gson.toJson(generatedCases, writer);
        }
        System.out.println("âœ… Saved " + generatedCases.size() + " test cases to " + filePath);
    }
}