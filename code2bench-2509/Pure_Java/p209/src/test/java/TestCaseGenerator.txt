package p209;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import net.jqwik.api.*;
import net.jqwik.api.lifecycle.AfterContainer;
import p209.GroundTruth;

public class TestCaseGenerator {

    static class TestCase {
        Map<String, Object> Inputs;
        Object Expected;
        TestCase(Map<String, Object> inputs, Object expected) {
            this.Inputs = inputs;
            this.Expected = expected;
        }
    }

    static List<TestCase> generatedCases = new ArrayList<>();
    static AtomicInteger caseCount = new AtomicInteger(0);
    static final int MAX_CASES = 500;

    @Property(tries = 10000)
    void generateTestCases(
            @ForAll("float32") float initialPos,
            @ForAll("float32") float velocity,
            @ForAll("float32") float acceleration,
            @ForAll("nullableLong") Long targetTime,
            @ForAll("nullableFloat") Float targetVelocity,
            @ForAll("int32") int minBound,
            @ForAll("int32") int maxBound) {
        if (caseCount.get() >= MAX_CASES) {
            return;
        }

        if (minBound >= maxBound) {
            return;
        }

        long result;
        try {
            result = GroundTruth.computeBound(initialPos, velocity, acceleration, targetTime, targetVelocity, minBound, maxBound);
        } catch (Exception e) {
            return;
        }

        Map<String, Object> inputs = new LinkedHashMap<>();
        inputs.put("initialPos", initialPos);
        inputs.put("velocity", velocity);
        inputs.put("acceleration", acceleration);
        inputs.put("targetTime", targetTime);
        inputs.put("targetVelocity", targetVelocity);
        inputs.put("minBound", minBound);
        inputs.put("maxBound", maxBound);
        generatedCases.add(new TestCase(inputs, result));
        caseCount.incrementAndGet();
    }

    @Example
    void example1() {
        generateTestCases(0.0f, 0.0f, 0.0f, null, null, 0, 100);
    }

    @Example
    void example2() {
        generateTestCases(10.0f, 5.0f, 2.0f, null, null, 0, 100);
    }

    @Example
    void example3() {
        generateTestCases(10.0f, 5.0f, -2.0f, null, null, 0, 100);
    }

    @Example
    void example4() {
        generateTestCases(10.0f, 5.0f, 2.0f, 5L, 10.0f, 0, 100);
    }

    @Example
    void example5() {
        generateTestCases(10.0f, 5.0f, -2.0f, 5L, 10.0f, 0, 100);
    }

    @Example
    void example6() {
        generateTestCases(10.0f, 0.0f, 0.0f, null, null, 0, 100);
    }

    @Example
    void example7() {
        generateTestCases(10.0f, 0.0f, 0.0f, 5L, 10.0f, 0, 100);
    }

    @Example
    void example8() {
        generateTestCases(10.0f, 5.0f, 2.0f, -1L, null, 0, 100);
    }

    @Example
    void example9() {
        generateTestCases(10.0f, 5.0f, -2.0f, -1L, null, 0, 100);
    }

    @Example
    void example10() {
        generateTestCases(10.0f, 5.0f, 0.0f, null, 0.0f, 0, 100);
    }

    @Example
    void example11() {
        generateTestCases(10.0f, 5.0f, 0.0f, 5L, 0.0f, 0, 100);
    }

    @Example
    void example12() {
        generateTestCases(10.0f, 5.0f, 0.0f, null, 10.0f, 0, 100);
    }

    @Example
    void example13() {
        generateTestCases(10.0f, 5.0f, 0.0f, 5L, 10.0f, 0, 100);
    }

    @Provide
    Arbitrary<Float> float32() {
        return Arbitraries.floats().between(-Float.MAX_VALUE, Float.MAX_VALUE);
    }

    @Provide
    Arbitrary<Long> nullableLong() {
        return Arbitraries.longs().between(Long.MIN_VALUE, Long.MAX_VALUE).injectNull(0.5);
    }

    @Provide
    Arbitrary<Float> nullableFloat() {
        return Arbitraries.floats().between(-Float.MAX_VALUE, Float.MAX_VALUE).injectNull(0.5);
    }

    @Provide
    Arbitrary<Integer> int32() {
        return Arbitraries.integers().between(-2147483648, 2147483647);
    }

    @AfterContainer
    static void saveTestCases() throws IOException {
        if (generatedCases.isEmpty()) {
            return;
        }
        String dirPath = "src/test/java/test_cases";
        File dir = new File(dirPath);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String filePath = dirPath + "/test_cases.json";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (Writer writer = new FileWriter(filePath)) {
            gson.toJson(generatedCases, writer);
        }
        System.out.println("âœ… Saved " + generatedCases.size() + " test cases to " + filePath);
    }
}