package p235;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import net.jqwik.api.*;
import net.jqwik.api.lifecycle.AfterContainer;
import p235.GroundTruth;

public class TestCaseGenerator {

    static class TestCase {
        Map<String, Object> Inputs;
        Object Expected;
        TestCase(Map<String, Object> inputs, Object expected) {
            this.Inputs = inputs;
            this.Expected = expected;
        }
    }

    static List<TestCase> generatedCases = new ArrayList<>();
    static AtomicInteger caseCount = new AtomicInteger(0);
    static final int MAX_CASES = 500;

    @Property(tries = 10000)
    void generateTestCases(@ForAll("byteArray") byte[] original, @ForAll("int32") int from, @ForAll("int32") int to) {
        if (caseCount.get() >= MAX_CASES) {
            return;
        }

        // Ensure valid indices
        if (from < 0 || to < 0 || from > original.length || to > original.length || from > to) {
            return;
        }

        byte[] result;
        try {
            result = GroundTruth.copyOfRange(original, from, to);
        } catch (IllegalArgumentException e) {
            return;
        }

        Map<String, Object> inputs = new LinkedHashMap<>();
        inputs.put("original", original);
        inputs.put("from", from);
        inputs.put("to", to);
        generatedCases.add(new TestCase(inputs, result));
        caseCount.incrementAndGet();
    }

    @Example
    void example1() {
        generateTestCases(new byte[]{1, 2, 3}, 0, 3);
    }

    @Example
    void example2() {
        generateTestCases(new byte[]{1, 2, 3}, 1, 2);
    }

    @Example
    void example3() {
        generateTestCases(new byte[]{1, 2, 3}, 0, 0);
    }

    @Example
    void example4() {
        generateTestCases(new byte[]{1, 2, 3}, 3, 3);
    }

    @Example
    void example5() {
        generateTestCases(new byte[]{1, 2, 3}, 1, 0);
    }

    @Provide
    Arbitrary<byte[]> byteArray() {
        return Arbitraries.bytes().array(byte[].class).ofMinSize(0).ofMaxSize(100);
    }

    @Provide
    Arbitrary<Integer> int32() {
        return Arbitraries.integers().between(0, 100); // Adjusted to avoid negative indices
    }

    @AfterContainer
    static void saveTestCases() throws IOException {
        if (generatedCases.isEmpty()) {
            return;
        }
        String dirPath = "src/test/java/test_cases";
        File dir = new File(dirPath);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String filePath = dirPath + "/test_cases.json";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (Writer writer = new FileWriter(filePath)) {
            gson.toJson(generatedCases, writer);
        }
        System.out.println("âœ… Saved " + generatedCases.size() + " test cases to " + filePath);
    }
}